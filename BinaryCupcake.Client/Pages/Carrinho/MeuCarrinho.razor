@page "/carrinho"
@using BinaryCupcake.Client.PrivateModels
@using BinaryCupcake.Client.Services
@using BinaryCupcake.SharedLibrary.Responses

<div class="container-fluid">
    <div class="row">
        <!-- Resumo do Carrinho -->
        <div class="col-lg-3">
            <div class="card">
                <div class="card-header text-center">Resumo do Carrinho</div>
                <div class="card-body text-center">
                    <span class="display-4">
                        R$ @MeuCarrinhoPedido?.Sum(x => x.Total).ToString("N2")
                    </span>
                </div>
                <div class="card-footer text-center">
                    <button class="btn btn-danger w-100">
                        <i class="fa fa-cart-arrow-down"></i>
                        Prosseguir para Pagamento
                    </button>
                </div>
            </div>
        </div>

        <!-- Detalhes do Carrinho -->
        <div class="col-lg-9">
            <div class="card">
                <div class="card-header text-center">Detalhes do Carrinho</div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Imagem</th>
                                <th scope="col">Nome</th>
                                <th scope="col">Preço</th>
                                <th scope="col">Quantidade</th>
                                <th scope="col">Total</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (MeuCarrinhoPedido is not null && MeuCarrinhoPedido.Any())
                            {
                                var carrinho = MeuCarrinhoPedido.ToList();
                                int contador = 1;

                                foreach (var produto in carrinho)
                                {
                                    <tr>
                                        <td>@contador</td>
                                        <td><img src="@produto.Imagem" alt="Produto" width="100" height="100"></td>
                                        <td>@produto.Nome</td>
                                        <td>R$ @produto.Preco.ToString("N2")</td>
                                        <td>
                                            <input type="number" class="form-control w-30" min="0" value="@produto.Quantidade" @onchange="@(e => TrataManipulacaoCarrinho(e, produto))" />
                                        </td>
                                        <td>R$ @produto.Total.ToString("N2")</td>
                                        <td>
                                            <button class="btn btn-sm btn-danger" @onclick="async () => await RemoverProduto(produto)">
                                                <i class="fa fa-trash"></i> Remover
                                            </button>
                                        </td>
                                    </tr>
                                    contador++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-center">Seu carrinho está vazio.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>



<style>
    .card {
        border-radius: 10px;
    }

    .btn-danger {
        border-radius: 20px;
    }

    input[type="number"] {
        max-width: 80px;
    }
</style>

@code {
    List<Pedido> MeuCarrinhoPedido = new();

    protected async override Task OnInitializedAsync()
    {
        MeuCarrinhoPedido = await carrinhoService.MeusPedidos();
    }

    async Task TrataManipulacaoCarrinho(Microsoft.AspNetCore.Components.ChangeEventArgs e, Pedido pedido)
    {
        if (int.TryParse(e.Value?.ToString(), out int novaQuantidade))
        {
            var pedidoAtualizado = MeuCarrinhoPedido.FirstOrDefault(x => x.Id == pedido.Id);
            if (pedidoAtualizado != null)
            {
                if (novaQuantidade > 0)
                {
                    // Atualiza a quantidade no carrinho
                    pedidoAtualizado.Quantidade = novaQuantidade;
                    await carrinhoService.AddCarrinho(new Produto { Id = pedido.Id }, pedidoAtualizado.Quantidade);
                }
                else
                {
                    // Remove o item do carrinho se a quantidade for zero
                    MeuCarrinhoPedido.Remove(pedidoAtualizado);
                    await carrinhoService.RemoverCarrinho(pedido);
                }
            }
        }
    }

    // Remove um produto do carrinho
    async Task RemoverProduto(Pedido produto)
    {
        await carrinhoService.RemoverCarrinho(produto);

        MeuCarrinhoPedido = await carrinhoService.MeusPedidos();
    }
}
