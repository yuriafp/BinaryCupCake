@page "/registrar"


<div class="container-fluid">
    <div class="col-lg-6 container-fluid justify-content-center">
        <EditForm Model="Usuario" OnValidSubmit="HandleRegistrar">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="card">
                <div class="card-header" align="center">Cadastro</div>
                <div class="card-body">
                    <!-- Nome -->
                    <div class="form-group">
                        <label class="form-label">Nome completo:</label>
                        <SfTextBox TValue="string" @bind-Value="Usuario.Nome" Placeholder="Digite seu nome completo" CssClass="e-outline"></SfTextBox>
                    </div>
                    <!-- Email -->
                    <div class="form-group mt-3">
                        <label class="form-label">Email:</label>
                        <SfTextBox TValue="string" @bind-Value="Usuario.Email" Placeholder="Digite seu email" CssClass="e-outline"></SfTextBox>
                    </div>
                    <!-- Senha -->
                    <div class="form-group mt-3">
                        <label class="form-label">Senha:</label>
                        <SfTextBox TValue="string" @bind-Value="Usuario.Senha" Placeholder="Digite sua senha" CssClass="e-outline" InputType="Password"></SfTextBox>
                    </div>
                    <!-- Confirmação da Senha -->
                    <div class="form-group mt-3">
                        <label class="form-label">Confirme a senha:</label>
                        <SfTextBox TValue="string" @bind-Value="Usuario.ConfirmaSenha" Placeholder="Confirme sua senha" CssClass="e-outline" InputType="Password"></SfTextBox>
                    </div>
                    <!-- Botões -->
                    <div class="form-group mt-3">
                        @if (MostrarBtnSalvar)
                        {
                            <SfButton CssClass="e-outline e-primary float-end" Content="Registrar" Disabled="@MostrarBtnOcupado"></SfButton>
                        }
                        <BtnOcupadoComponent MostrarBtnOcupado="MostrarBtnOcupado"></BtnOcupadoComponent>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<MessageDialog @ref="messageDialogRegistro"></MessageDialog>

@code {
    UsuarioDTO Usuario = new();

    async Task HandleRegistrar()
    {
        MostrarBtnSalvar = false;
        MostrarBtnOcupado = true;

        // Validação de senha
        if (Usuario.Senha != Usuario.ConfirmaSenha)
        {
            messageDialogRegistro!.SetDialogValues("danger", "As senhas não coincidem.");
            await SetMessageDialog();
            return;
        }

        var (flag, mensagem) = await usuarioService.Registrar(Usuario);
        if (flag)
            messageDialogRegistro!.SetDialogValues("success", mensagem);
        else
            messageDialogRegistro!.SetDialogValues("danger", mensagem);

        await SetMessageDialog();
    }

    async Task SetMessageDialog()
    {
        await messageDialogRegistro!.ShowMessage();
        MostrarBtnOcupado = false;
        MostrarBtnSalvar = true;
        StateHasChanged();
    }

    MessageDialog? messageDialogRegistro;
    public bool MostrarBtnOcupado { get; set; }
    public bool MostrarBtnSalvar { get; set; } = true;
}
