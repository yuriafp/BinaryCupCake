@page "/"
<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            @if (carregando)
            {
                <div class="d-flex justify-content-center align-items-center vh-100">
                    <div class="spinner-border text-dark" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                </div>
            }
            else if (ListaProdutoDestacado!.Any())
            {
                <div class="control-container text-dark">
                    <SfCarousel ButtonsVisibility="CarouselButtonVisibility.VisibleOnHover" AnimationEffect="CarouselAnimationEffect.Slide" AutoPlay="true" ShowIndicators="false">
                        <ChildContent>
                            @foreach (Produto produto in ListaProdutoDestacado!.OrderByDescending(produto => produto.Data).Take(5))
                            {
                                <CarouselItem>
                                    <figure class="img-container d-flex justify-content-center align-items-center mb-4">
                                        <img src="@produto.Base64Img" width="300" height="300" class="img-fluid rounded" alt="@produto.Nome" />
                                    </figure>
                                    <div class="d-flex flex-column align-items-center text-center mb-5" style="position: relative;">
                                        <div>
                                            <p>
                                                <span style="font-family: 'Roboto'; text-indent: 2px;" class="text-dark fw-bold display-4">
                                                    @produto.Nome
                                                    <sup style="font-family: 'Roboto';">
                                                        <span class="badge rounded-pill bg-black fs-6">@GetNovidade(produto.Data)</span>
                                                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                                              style="font-family: 'Roboto'; font-size: 20px; padding: 0.5em 1em;">
                                                            @(produto.Preco.ToString("C2", System.Globalization.CultureInfo.GetCultureInfo("pt-BR")) ?? "Preço não disponível")
                                                            <span class="visually-hidden"></span>
                                                        </span>
                                                    </sup>
                                                </span>
                                            </p>
                                            <p class="text-muted fs-6 w-70" style="text-align: center; font-family: 'Roboto'; font-size: 10px;">
                                                @GetDescricao(produto.Descricao!)
                                            </p>
                                        </div>
                                        <div class="d-flex justify-content-center align-items-center gap-3 mt-4 flex-wrap">
                                            <button class="btn btn-secondary fw-bold px-4 py-2" @onclick="() => NavigateTo(produtos)" id="styleButton">
                                                <i class="fa fa-list"></i> Mais detalhes
                                            </button>
                                            <button class="btn btn-outline-dark fw-bold px-1 py-2" @onclick="() => AddCarrinho(produto, 1)" id="styleButton">
                                                <i class="fa fa-cart-plus"></i> Adicionar ao carrinho!
                                            </button>
                                        </div>
                                    </div>
                                </CarouselItem>
                            }
                        </ChildContent>
                        <PreviousButtonTemplate>
                            <i class="fa-solid fa-less-than" style="font-size: 25px; id="styleCursor"></i>
                        </PreviousButtonTemplate>
                        <NextButtonTemplate>
                            <i class="fa-solid fa-greater-than" style="font-size: 25px; id="styleCursor"></i>
                        </NextButtonTemplate>

                        <IndicatorsTemplate>
                            <div class="d-flex justify-content-center align-items-center" style="height: 100px;">
                            </div>
                        </IndicatorsTemplate>

                    </SfCarousel>
                </div>
            }
            else
            {
                <div class="alert alert-info">Nenhum produto disponível!</div>
            }
        </div>
    </div>
</div>
<footer class="footer mt-auto text-center py-3 bg-dark text-white">
    <div class="container">
        <p>Este é um projeto acadêmico desenvolvido para fins educacionais. Todos os direitos reservados.</p>
    </div>
</footer>


@code {
    List<Produto>? ListaProdutoDestacado = new();
    bool carregando = true;
    string produtos = "/produtos";

    protected override async Task OnInitializedAsync()
    {
        await RecuperaProdutoDestacado();
        carregando = false;
    }
    private async Task RecuperaProdutoDestacado()
    {
        ListaProdutoDestacado?.Clear();
        bool produtoDestacado = true;

        var response = await ClientService.ListaTodosProdutosPorDestaque(produtoDestacado);
        if (response is null) return;

        foreach (var produto in response)
        {
            ListaProdutoDestacado!.Add(produto);
        }
    }
    string GetNovidade(DateTime dataUpload)
    {
        int maxDias = 30;
        int diasDesdeUpload = (DateTime.Now.ToUniversalTime() - dataUpload).Days;
        return diasDesdeUpload <= maxDias ? "Novidade" : string.Empty;
    }
    string GetDescricao(string descricao)
    {
        int tamanhoMax = 500;
        return descricao.Length > tamanhoMax ? $"{descricao.Substring(0, tamanhoMax)}..." : descricao;
    }
    private async Task AddCarrinho(Produto produto, int quantidade = 1)
    {
        if (quantidade <= 0)
        {
            return;
        }

        var response = await carrinhoService.AddCarrinho(produto, quantidade);

    }
    private void NavigateTo(string url)
    {
        NavManager.NavigateTo(url);
    }
}
